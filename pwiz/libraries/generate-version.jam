#
# $Id: generate-version.jam 2851 2011-07-08 21:43:01Z chambm $
#

import svnrev ;
import sequence ;
import common ;
import path ;
import string ;

# rule for generating a Version.cpp file
rule cpp ( filepath ? : namespaces * : major : minor :
           sources-with-rcs-keywords + :
           warn-on-missing ? : print-revision-info ? )
{
    # default filepath is "Version.cpp" in the current directory
    filepath ?= Version.cpp ;
    filepath = [ path.native $(filepath) ] ;

    if $(print-revision-info) { echo Generating/updating version in $(filepath) ; }

    local existing-revision-info ;
    if [ path.exists $(filepath) ]
    {
        existing-revision-info = [ svnrev.get-revision-info $(filepath) ] ;
        if $(print-revision-info) { echo Existing maximum revision: $(existing-revision-info) ; }
    }

    sources-with-rcs-keywords = [ sequence.transform path.native : $(sources-with-rcs-keywords) ] ;
    local revision-info = [ svnrev.get-revision-info $(sources-with-rcs-keywords)
                                : $(warn-on-missing) : $(print-revision-info) ] ;

    if $(print-revision-info) { echo Current maximum revision: $(revision-info) ; }

    local namespace-header = "" ;
    local namespace-footer = "" ;
    if $(namespaces)
    {
        for local namespace in $(namespaces)
        {
            namespace-header += "namespace $(namespace) {\n" ;
            namespace-footer += "\n} // namespace $(namespace)" ;
        }

        namespace-header = [ string.join $(namespace-header) ] ;
        namespace-footer = [ string.join [ sequence.reverse $(namespace-footer) ] ] ;
    }

    if ! $(existing-revision-info) ||
       $(existing-revision-info[1]) != $(revision-info[1])
    {
        if [ path.exists $(filepath) ]
        {
            local rm = [ common.rm-command ] ;
            rm = $(rm:J=" ") ;
            SHELL "$(rm) $(filepath)" ;
        }

        local header-text =
"// This file was generated by the \"svnrev\" utility
// You should not modify it manually, as it may be re-generated.
//
// $Revision: $(revision-info[1]) $
// $Date: $(revision-info[2])-$(revision-info[3])-$(revision-info[4]) $
//

\#include \"$(filepath:D=:S=.hpp)\"
\#include <sstream>

\#ifdef PWIZ_USER_VERSION_INFO_H // in case you need to add any info version of your own
\#include PWIZ_USER_VERSION_INFO_H  // must define PWIZ_USER_VERSION_INFO_H_STR for use below
\#endif

$(namespace-header)

int Version::Major()                {return $(major);}
int Version::Minor()                {return $(minor);}
int Version::Revision()             {return $(revision-info[1]);}
std::string Version::LastModified() {return \"$(revision-info[2])-$(revision-info[3])-$(revision-info[4])\";}
std::string Version::str()
{
	std::ostringstream v;
	v << Major() << '.' << Minor() << '.' << Revision();
\#ifdef PWIZ_USER_VERSION_INFO_H
	v << \" (\" << PWIZ_USER_VERSION_INFO_H_STR << \")\";
\#endif
	return v.str();
}

$(namespace-footer)
" ;

        header-text = @($(filepath):E=$(header-text)) ;
        RESCAN ;
    }

    return $(revision-info) ;
}
