#
# $Id: Jamfile.jam 3650 2012-05-31 20:08:21Z chambm $
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2009 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 


import modules ;
import path ;


path-constant API_PATH : . ;


# don't bother defining this API for non-Windows platforms.
if [ modules.peek : NT ]
{

if ! --i-agree-to-the-vendor-licenses in [ modules.peek : ARGV ]
{
    SHELL "copy \"$(API_PATH)\\Interop.EDAL.SxS.manifest.dummy\" \"$(API_PATH)\\Interop.EDAL.SxS.manifest\"" ;
    SHELL "copy \"$(API_PATH)\\Interop.HSREADWRITELib.SxS.manifest.dummy\" \"$(API_PATH)\\Interop.HSREADWRITELib.SxS.manifest\"" ;
    RESCAN ;
}

rule vendor-api-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ path.exists $(API_PATH)/Interop.EDAL.dll ]
    {
        # HACK: <link>shared isn't being passed in properties like I'd expect, so I also check the command-line
        if <link>shared in $(properties) || link=shared in [ modules.peek : ARGV ]
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc/<link>shared ;
        }
        else
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc ;
        }
        result += <assembly>$(API_PATH)/Interop.EDAL.dll ;
        result += <assembly>$(API_PATH)/Interop.HSREADWRITELib.dll ;
        result += <assembly>$(API_PATH)/BDal.CXt.Lc.dll ;
        result += <assembly>$(API_PATH)/BDal.CXt.Lc.Factory.dll ;
        result += <assembly>$(API_PATH)/BDal.CXt.Lc.Interfaces.dll ;
        result += <assembly>$(API_PATH)/BDal.CXt.Lc.UntU2.dll ;
        result += <assembly-dependency>$(API_PATH)/CompassXtractMS.dll ;
        result += <assembly-dependency>$(API_PATH)/boost_regex-vc80-mt-1_33_1-BDAL_20070424.dll ;
        result += <assembly-dependency>$(API_PATH)/boost_thread-vc80-mt-1_33_1-BDAL_20070424.dll ;
        result += <assembly-dependency>$(API_PATH)/boost_date_time-vc80-mt-1_33_1-BDAL_20070424.dll ;
        result += <assembly-dependency>$(API_PATH)/libfftw3-3.dll ;
        result += <assembly-dependency>$(API_PATH)/libfftw3f-3.dll ;
        result += <assembly-dependency>$(API_PATH)/NTB-vc80-mt-1_5_97.dll ;
        result += <assembly-dependency>$(API_PATH)/HSReadWrite.dll ;
        result += <manifest-dependency>$(API_PATH)/Interop.EDAL.dll ;
        result += <manifest-dependency>$(API_PATH)/Interop.HSREADWRITELib.dll ;
        result += <assembly-dependency>$(API_PATH)/Interop.EDAL.SxS.manifest ;
        result += <assembly-dependency>$(API_PATH)/Interop.HSREADWRITELib.SxS.manifest ;
        result += <assembly-dependency>$(API_PATH)/FlexVariableTable.xml ;
        result += <assembly-dependency>$(API_PATH)/ICRVariableTable.xml ;
        result += <linkflags>/CLRTHREADATTRIBUTE:STA ; # required by HSReadWrite.dll
    }
    return $(result) ;
}

if --i-agree-to-the-vendor-licenses in [ modules.peek : ARGV ]
{
    lib pwiz_vendor_api_bruker
        : # sources
            CompassData.cpp
            $(PWIZ_ROOT_PATH)/pwiz/data/vendor_readers/Bruker//Reader_Bruker_Detail
        : # requirements

            # - when boost::thread is link=static, the exe header is tweaked to call
            #   thread-local storage initialization routines (before main())
            # - when a /clr object is link=static, the exe header is similarly tweaked
            #   to initialize the CLR
            # - these two tweaks are incompatible: either boost::thread must be link=shared,
            #   or the CLR object must be
            # HACK: not needed when using hacked tss_pe.cpp
            #<link>shared
            
            <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
            <conditional>@vendor-api-requirements
            <conditional>@msvc-requirement
            <toolset>msvc:<using-clr>true # requires hacked msvc.jam
            <link>static # <using-clr>true and <link>shared don't mix
            <address-model>64:<build>no
        : # default-build
        : # usage-requirements
            <conditional>@vendor-api-requirements
        ;

    # a test utility, not a unit test
    exe CompassDataTest
        : CompassDataTest.cpp
          pwiz_vendor_api_bruker
        ;

    explicit CompassDataTest ;
}

install install_pwiz_vendor_api_bruker
    : [ path.glob $(API_PATH) : *.dll *.manifest *.xml ]
    ;

explicit install_pwiz_vendor_api_bruker ;

# for application build and install
install install_pwiz_vendor_api_bruker_stub
    : [ path.glob $(API_PATH) : *.manifest ]
    ;
}
