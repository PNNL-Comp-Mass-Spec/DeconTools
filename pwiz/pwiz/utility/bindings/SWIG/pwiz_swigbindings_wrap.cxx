/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <deque>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

  /* everything in this section (including this comment) appears in the generated
     wrapper code, so here's where you declare the C/C++ functions that the wrapper
     will find in the DLL. 
	 $Id: pwiz_swigbindings_wrap.cxx 1862 2010-03-05 00:39:34Z pcbrefugee $
     Note that if there are things in your headers that you don't want SWIG to deal
	 with, just surround them #ifndef SWIG / #endif .  
	 */
#include "pwiz_RAMPAdapter.hpp"
#include "../../../data/common/cv.hpp"
#include "../../../data/common/ParamTypes.hpp"
#include "../../../data/msdata/MSData.hpp"
using namespace pwiz;
using namespace pwiz::msdata;
using namespace pwiz::data;



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_new_1vectord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_new_1vectord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_vectord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_delete_1vectord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_mzInt_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  e_contentType result;
  
  (void)jenv;
  (void)jcls;
  result = (e_contentType)mzInt;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_INSTRUMENT_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_SCANTYPE_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1seqNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seqNum = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1seqNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->seqNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1acquisitionNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->acquisitionNum = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1acquisitionNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->acquisitionNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1msLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->msLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1msLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->msLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1peaksCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->peaksCount = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1peaksCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->peaksCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1totIonCurrent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->totIonCurrent = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1totIonCurrent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->totIonCurrent);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1retentionTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->retentionTime = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1retentionTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->retentionTime);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1basePeakMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->basePeakMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1basePeakMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->basePeakMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1basePeakIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->basePeakIntensity = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1basePeakIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->basePeakIntensity);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1collisionEnergy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->collisionEnergy = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1collisionEnergy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->collisionEnergy);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1ionisationEnergy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ionisationEnergy = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1ionisationEnergy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->ionisationEnergy);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1lowMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lowMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1lowMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->lowMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1highMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->highMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1highMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->highMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorScanNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->precursorScanNum = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorScanNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->precursorScanNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->precursorMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->precursorMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorCharge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->precursorCharge = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorCharge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->precursorCharge);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->precursorIntensity = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1precursorIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->precursorIntensity);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1scanType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->scanType, (const char *)arg2, 32-1);
      arg1->scanType[32-1] = 0;
    } else {
      arg1->scanType[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1scanType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (char *)(char *) ((arg1)->scanType);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedScan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mergedScan = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedScan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->mergedScan);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedResultScanNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mergedResultScanNum = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedResultScanNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->mergedResultScanNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedResultStartScanNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mergedResultStartScanNum = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedResultStartScanNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->mergedResultStartScanNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedResultEndScanNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mergedResultEndScanNum = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1mergedResultEndScanNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->mergedResultEndScanNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1filePosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  ramp_fileoffset_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  arg2 = (ramp_fileoffset_t)jarg2; 
  if (arg1) (arg1)->filePosition = arg2;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_ScanHeaderStruct_1filePosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  ramp_fileoffset_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  result =  ((arg1)->filePosition);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_new_1ScanHeaderStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ScanHeaderStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ScanHeaderStruct *)new ScanHeaderStruct();
  *(ScanHeaderStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_delete_1ScanHeaderStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ScanHeaderStruct *arg1 = (ScanHeaderStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ScanHeaderStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1scanCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scanCount = arg2;
}


SWIGEXPORT jint JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1scanCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  result = (int) ((arg1)->scanCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1lowMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lowMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1lowMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->lowMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1highMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->highMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1highMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->highMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1startMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->startMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1startMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->startMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1endMZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->endMZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1endMZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->endMZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1dStartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dStartTime = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1dStartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->dStartTime);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1dEndTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dEndTime = arg2;
}


SWIGEXPORT jdouble JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_RunHeaderStruct_1dEndTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  result = (double) ((arg1)->dEndTime);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_new_1RunHeaderStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RunHeaderStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RunHeaderStruct *)new RunHeaderStruct();
  *(RunHeaderStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_delete_1RunHeaderStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RunHeaderStruct *arg1 = (RunHeaderStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RunHeaderStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1manufacturer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->manufacturer, (const char *)arg2, 2000-1);
      arg1->manufacturer[2000-1] = 0;
    } else {
      arg1->manufacturer[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1manufacturer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  result = (char *)(char *) ((arg1)->manufacturer);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->model, (const char *)arg2, 2000-1);
      arg1->model[2000-1] = 0;
    } else {
      arg1->model[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1model_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  result = (char *)(char *) ((arg1)->model);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1ionisation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ionisation, (const char *)arg2, 2000-1);
      arg1->ionisation[2000-1] = 0;
    } else {
      arg1->ionisation[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1ionisation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  result = (char *)(char *) ((arg1)->ionisation);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1analyzer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->analyzer, (const char *)arg2, 2000-1);
      arg1->analyzer[2000-1] = 0;
    } else {
      arg1->analyzer[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1analyzer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  result = (char *)(char *) ((arg1)->analyzer);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1detector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->detector, (const char *)arg2, 2000-1);
      arg1->detector[2000-1] = 0;
    } else {
      arg1->detector[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_InstrumentStruct_1detector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstrumentStruct **)&jarg1; 
  result = (char *)(char *) ((arg1)->detector);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_new_1InstrumentStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstrumentStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InstrumentStruct *)new InstrumentStruct();
  *(InstrumentStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_delete_1InstrumentStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InstrumentStruct *arg1 = (InstrumentStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InstrumentStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_new_1pwiz_1RAMPAdapter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  pwiz_RAMPAdapter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (pwiz_RAMPAdapter *)new pwiz_RAMPAdapter((std::string const &)*arg1);
  *(pwiz_RAMPAdapter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_delete_1pwiz_1RAMPAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pwiz_RAMPAdapter *arg1 = (pwiz_RAMPAdapter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pwiz_RAMPAdapter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_pwiz_1RAMPAdapter_1scanCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pwiz_RAMPAdapter *arg1 = (pwiz_RAMPAdapter *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pwiz_RAMPAdapter **)&jarg1; 
  result = ((pwiz_RAMPAdapter const *)arg1)->scanCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_pwiz_1RAMPAdapter_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pwiz_RAMPAdapter *arg1 = (pwiz_RAMPAdapter *) 0 ;
  int arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pwiz_RAMPAdapter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((pwiz_RAMPAdapter const *)arg1)->index(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_pwiz_1RAMPAdapter_1getScanHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  pwiz_RAMPAdapter *arg1 = (pwiz_RAMPAdapter *) 0 ;
  size_t arg2 ;
  ScanHeaderStruct *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pwiz_RAMPAdapter **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(ScanHeaderStruct **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScanHeaderStruct & reference is null");
    return ;
  } 
  ((pwiz_RAMPAdapter const *)arg1)->getScanHeader(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_pwiz_1RAMPAdapter_1getScanPeaks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  pwiz_RAMPAdapter *arg1 = (pwiz_RAMPAdapter *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pwiz_RAMPAdapter **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  ((pwiz_RAMPAdapter const *)arg1)->getScanPeaks(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_pwiz_1RAMPAdapter_1getRunHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pwiz_RAMPAdapter *arg1 = (pwiz_RAMPAdapter *) 0 ;
  RunHeaderStruct *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pwiz_RAMPAdapter **)&jarg1; 
  arg2 = *(RunHeaderStruct **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RunHeaderStruct & reference is null");
    return ;
  } 
  ((pwiz_RAMPAdapter const *)arg1)->getRunHeader(*arg2);
}


SWIGEXPORT void JNICALL Java_proteowizard_pwiz_RAMPAdapter_pwiz_1swigbindingsJNI_pwiz_1RAMPAdapter_1getInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pwiz_RAMPAdapter *arg1 = (pwiz_RAMPAdapter *) 0 ;
  InstrumentStruct *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pwiz_RAMPAdapter **)&jarg1; 
  arg2 = *(InstrumentStruct **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InstrumentStruct & reference is null");
    return ;
  } 
  ((pwiz_RAMPAdapter const *)arg1)->getInstrument(*arg2);
}


#ifdef __cplusplus
}
#endif

