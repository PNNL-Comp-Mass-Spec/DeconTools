#
# $Id$
#
#
# Original author: Barbara Frewen <frewen .at. u.washington.edu>,
#                  MacCoss Lab, Department of Genome Sciences, UW
#
# Copyright 2012 University of Washington - Seattle, WA
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 

# why is this not inherited from the root?
.os = [ modules.peek : OS ] ; # NT, LINUX, MACOSX

using expat : 2.0.1 : $(EXPAT_SOURCE) ;

# use a rule to return <define>__LINUX__ based on the value of OS
rule define-os ( properties * )
{
  if ( [ MATCH (LINUX) : $(.os) ] )
  {
    return <define>__LINUX__ ;
  }
}

rule mascot-define ( properties * )
{
    local result ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        result += <define>USE_MASCOT_PARSER ;
    }
    return $(result) ;
}

rule mascot-api-requirements ( properties * )
{
    local result = [ mascot-define $(properties) ] ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        result += <source>MascotResultsReader.cpp ;
    }
    else
    {
        result += <source>MascotResultsReader_dummy.cpp ;
    }
    return $(result) [ mascot-api-usage-requirements $(properties) ] ;
}

rule mascot-api-usage-requirements ( properties * )
{
    local result ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        result += <library>$(PWIZ_ROOT_PATH)//msparser <dependency>unimod_2.xsd ;
    }

    return $(result) ;
}


# some properties for all
project 
  : requirements
      [ define-os ]
      <include>../libraries/sqlite
      <include>$(PWIZ_ROOT_PATH)/libraries/expat-2.0.1/lib
;

# the main BiblioSpec library
lib blibbuild
  : # sources
    BlibBuilder.cpp
    BuildParser.cpp
    IdpXMLreader.cpp
    MzIdentMLReader.cpp
    PepXMLreader.cpp
    PercolatorXmlReader.cpp
    ProteinPilotReader.cpp
    saxhandler.cpp
    SQTreader.cpp
    SslReader.cpp
    TandemNativeParser.cpp
    WatersMseReader.cpp
  : # requirements
    <link>static
    <conditional>@mascot-api-requirements
    <library>../libraries/sqlite//sqlite
  : # default-build
  : # usage-requirements
    <conditional>@mascot-api-usage-requirements
    <library>../libraries/sqlite//sqlite
 ;

lib blib
  : # sources
    AminoAcidMasses.cpp
    BlibMaker.cpp
    BlibUtils.cpp
    CommandLine.cpp
    DotProduct.cpp
    LibReader.cpp
    Match.cpp
    Options.cpp
    PeakProcess.cpp
    PsmFile.cpp
    PwizReader.cpp
    RefSpectrum.cpp
    Reportfile.cpp
    SearchLibrary.cpp
    Spectrum.cpp
    SqliteRoutine.cpp
    Verbosity.cpp
    WeibullPvalue.cpp
  : # requirements
    <link>static
    <library>../libraries/sqlite//sqlite
  : # default-build
  : # usage-requirements
    <library>../libraries/sqlite//sqlite
 ;

# all the pwiz and boost libraries required
alias pwiz-boost-libraries 
  : /ext/boost//program_options
    /ext/boost//filesystem
    /ext/boost//regex
    /ext/boost//iostreams
    /ext/boost//system
    /ext/expat//expat
    $(PWIZ_ROOT_PATH)/pwiz/data/msdata//pwiz_data_msdata
    $(PWIZ_ROOT_PATH)/pwiz/data/identdata//pwiz_data_identdata
    $(PWIZ_ROOT_PATH)/pwiz/utility/minimxml//pwiz_utility_minimxml
    $(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc
;


 
# the main BiblioSpec tools
exe BlibBuild
  : # sources
    BlibBuild.cpp
    blib
    blibbuild
    pwiz-boost-libraries
  : # requirements
    <link>static
    <conditional>@mascot-define
  : # default-build
  : # usage-requirements
    <conditional>@mascot-api-usage-requirements
;

exe BlibFilter
  : # sources
    BlibFilter.cpp
    blib
    pwiz-boost-libraries
  : # requirements
    <link>static  
;

exe BlibSearch
  : # sources
    BlibSearch.cpp
    blib
    pwiz-boost-libraries
  : # requirements
    <link>static  
;

exe BlibToMs2
  : # sources
    BlibToMs2.cpp
    blib
    pwiz-boost-libraries
  : # requirements
    <link>static  
;

# code from BiblioSpec version 1 for converter
lib blib_v_1 
  : # sources
    original-LibIterator.cpp
    original-Library.cpp
    original-Modifications.cpp
    original-Ms2file.cpp
    original-ProcessedPeaks.cpp
    original-RefFile.cpp
    original-RefSpectrum.cpp
    original-Spectrum.cpp
  : # requirements
    <link>static
   ;

# converter for version 1 libraries to sqlite libraries
exe LibToSqlite3
  : # sources
    LibToSqlite3.cpp
    ../libraries/sqlite//sqlite
  : # requirements
    <link>static
    <threading>multi
    <library>/ext/zlib//z
    <library>blib_v_1
 ;

# required file for running BlibBuild with mascot support
make unimod_2.xsd : ./unimod_2.xsd : @common.copy : ;
