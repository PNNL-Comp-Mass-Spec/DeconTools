#
# $Id: Jamfile.jam 1328 2009-09-16 17:50:26Z chambm $
#
#
# Original author: Brendan MacLean <brendanx .at. u.washington.edu>,
#                  MacCoss Lab, Department of Genome Sciences, UW
#
# Copyright 2009 University of Washington - Seattle, WA
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import modules ;
if [ modules.peek : NT ] && --i-agree-to-the-vendor-licenses in [ modules.peek : ARGV ]
{
    import path feature ;
    path-constant SKYLINE_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Skyline ;
    path-constant PWIZ_WRAPPER_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Shared/ProteowizardWrapper ;

    # read these from global module
    TEST_PRECOMMAND = [ modules.peek : TEST_PRECOMMAND ] ;
    TEST_POSTCOMMAND = [ modules.peek : TEST_POSTCOMMAND ] ;

    rule build-properties ( targets + : sources * : properties * )
    {
        if <variant>debug in $(properties) ||
           <debug-symbols>on in $(properties)
        {
            CONFIGURATION on $(<[1]) = "Debug" ;
        }
        else
        {
            CONFIGURATION on $(<[1]) = "Release" ;
        }

        local location = [ path.make [ feature.get-values location : $(properties) ] ] ;
        OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
        JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
    }
    
    rule do_skyline_build ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_build
    {
        IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
        echo Building Skyline in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:Skyline /nologo /verbosity:minimal
        echo Building Skyline Test in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:Test /nologo /verbosity:minimal
        echo Building Skyline Test A in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:TestA /nologo /verbosity:minimal
        echo Building Skyline TestFunctional in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:TestFunctional /nologo /verbosity:minimal        
        echo Building Skyline TestTutorial in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:TestTutorial /nologo /verbosity:minimal        
        echo Building Skyline Test Runner in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:TestRunner /nologo /verbosity:minimal        
    }

    rule do_skyline_test ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test
    {
        IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
        echo Unit testing Skyline in $(CONFIGURATION:L) configuration...
        set name="Skyline unit test"
        $(TEST_PRECOMMAND)
        msbuild $(SKYLINE_PATH)/Skyline.test.proj /p:SolutionDir=$(SKYLINE_PATH);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);TestProject=Test /nologo /verbosity:minimal
        set status=%ERRORLEVEL%
        $(TEST_POSTCOMMAND)
    }
    
    rule do_skyline_test_a ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test_a
    {
        IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
        echo Unit A testing Skyline in $(CONFIGURATION:L) configuration...
        set name="Skyline unit test A"
        $(TEST_PRECOMMAND)
        msbuild $(SKYLINE_PATH)/Skyline.test.proj /p:SolutionDir=$(SKYLINE_PATH);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);TestProject=TestA /nologo /verbosity:minimal
        set status=%ERRORLEVEL%
        $(TEST_POSTCOMMAND)
    }
    
    rule do_skyline_test_functional ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test_functional
    {
        IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
        echo Functional testing Skyline in $(CONFIGURATION:L) configuration...
        set name="Skyline functional test"
        $(TEST_PRECOMMAND)
        msbuild $(SKYLINE_PATH)/Skyline.test.proj /p:SolutionDir=$(SKYLINE_PATH);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);TestProject=TestFunctional /nologo /verbosity:minimal
        set status=%ERRORLEVEL%
        $(TEST_POSTCOMMAND)
    }
    
    rule do_skyline_test_passed ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test_passed
    {
        IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
        echo Copying Skyline test output in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.test.proj /p:SolutionDir=$(SKYLINE_PATH);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);TestProject=Test /t:MSTest:Clean /nologo /verbosity:minimal
    }
    
    rule build-location ( properties * )
    {
        local result ;
        # don't override the location when it's already set
        if ! <location> in $(properties:G)
        {
            if <variant>debug in $(properties) ||
               <debug-symbols>on in $(properties)
            {
                result = <location>$(SKYLINE_PATH)/bin/$(PLATFORM)/Debug ;
            }
            else
            {
                result = <location>$(SKYLINE_PATH)/bin/$(PLATFORM)/Release ;
            }
            return $(result) ;
        }
        else
        {
            return $(properties) ;
        }
    }



    make Skyline.exe
        : # sources
        : # actions
            @do_skyline_build
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <assembly>../../pwiz/utility/bindings/CLI//pwiz_data_cli
            <conditional>@build-location
            <dependency>../../pwiz/utility/bindings/CLI//pwiz_data_cli/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz/utility/bindings/CLI//pwiz_data_cli.xml/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz_aux/msrc/utility/vendor_api/Waters//install_pwiz_vendor_api_waters/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
    ;
        
    make Test.dll
        : # sources
        : # actions
            @do_skyline_test
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;
    
    make TestA.dll
        : # sources
        : # actions
            @do_skyline_test_a
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;

    make TestFunctional.dll
        : # sources
        : # actions
            @do_skyline_test_functional
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;
        
    make Skyline.passed
        : # sources
        : # actions
            @do_skyline_test_passed
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
            <dependency>Test.dll
            <dependency>TestA.dll
            <dependency>TestFunctional.dll
            # note: we build TestTutorial.dll in do_skyline_build, but it takes too long to run in a Jam build
        ;
}
