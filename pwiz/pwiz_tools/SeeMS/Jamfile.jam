#
# $Id: Jamfile.jam 3527 2012-04-11 16:35:01Z chambm $
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2008 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import modules ;
if [ modules.peek : NT ]
{
    import path feature svnrev sequence ;
    path-constant SEEMS_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/SeeMS ;


    # rule for generating a C# AssemblyInfo file
    rule generate-AssemblyInfo.cs ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? :
                                    AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
    {
        # default filepath is "Properties/AssemblyInfo.cs" in the current directory
        filepath ?= Properties/AssemblyInfo.cs ;

        if $(print-revision-info) { echo Generating/updating version in $(filepath) ; }

        local existing-revision-info ;
        if [ path.exists $(filepath) ]
        {
            existing-revision-info = [ svnrev.get-revision-info $(filepath) ] ;
            if $(print-revision-info) { echo Existing maximum revision: $(existing-revision-info) ; }
        }

        sources-with-rcs-keywords = [ sequence.transform path.native : $(sources-with-rcs-keywords) ] ;
        local revision-info = [ svnrev.get-revision-info $(sources-with-rcs-keywords)
                                    : $(warn-on-missing) : $(print-revision-info) ] ;

        if $(print-revision-info) { echo Current maximum revision: $(revision-info) ; }

        if ! $(existing-revision-info) ||
           $(existing-revision-info[1]) != $(revision-info[1])
        {
            local AssemblyCopyright = "Copyright © $(AssemblyCompany) $(revision-info[2])" ;

            local header-text =
"// This file was generated by the \"svnrev\" utility
// You should not modify it manually, as it may be re-generated.
//
// $Revision: $(revision-info[1]) $
// $Date: $(revision-info[2])-$(revision-info[3])-$(revision-info[4]) $
//

using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle(\"$(AssemblyTitle)\")]
[assembly: AssemblyDescription(\"$(AssemblyDescription)\")]
[assembly: AssemblyCompany(\"$(AssemblyCompany)\")]
[assembly: AssemblyProduct(\"$(AssemblyProduct)\")]
[assembly: AssemblyCopyright(\"$(AssemblyCopyright)\")]
[assembly: AssemblyVersion(\"$(PWIZ_MAJOR).$(PWIZ_MINOR).$(revision-info[1])\")]
[assembly: AssemblyFileVersion(\"$(PWIZ_MAJOR).$(PWIZ_MINOR).$(revision-info[1])\")]
" ;

            header-text = @($(filepath):E=$(header-text)) ;
        }

        return $(revision-info) ;
    }

    # generate SeeMS version header
    generate-AssemblyInfo.cs $(SEEMS_PATH)/Properties/AssemblyInfo.cs :
        [ path.glob-tree $(SEEMS_PATH) : *.jam *.cs ]
        : #warn-on-missing
        : : "SeeMS" "A visualization, annotation, and processing tool for mass spectrometry data." "Vanderbilt University" "SeeMS" ;


    rule do_seems_build ( targets + : sources * : properties * )
    {
        if <variant>debug in $(properties) ||
           <debug-symbols>on in $(properties)
        {
            CONFIGURATION on $(<[1]) = "Debug" ;
        }
        else
        {
            CONFIGURATION on $(<[1]) = "Release" ;
        }

        local location = [ path.make [ feature.get-values location : $(properties) ] ] ;
        OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
        INTERMEDIATE_PATH on $(<[1]) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/obj/" ;
        JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
    }

    actions do_seems_build
    {
        IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
        echo Building SeeMS in $(CONFIGURATION:L) configuration...
        msbuild $(SEEMS_PATH)/seems.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);$(INTERMEDIATE_PATH);OutDir=$(OUTPUT_PATH) /nologo /verbosity:minimal
    }


    rule build-location ( properties * )
    {
        local result ;
        # don't override the location when it's already set
        if ! <location> in $(properties:G)
        {
            if <variant>debug in $(properties) ||
               <debug-symbols>on in $(properties)
            {
                result = <location>$(PWIZ_BUILD_PATH)/SeeMS/bin/$(PLATFORM)/Debug ;
            }
            else
            {
                result = <location>$(PWIZ_BUILD_PATH)/SeeMS/bin/$(PLATFORM)/Release ;
            }
            return $(result) ;
        }
        else
        {
            return $(properties) ;
        }
    }


    make seems.exe
        : # sources
        : # actions
            @do_seems_build
        : # requirements
            <conditional>@msvc-dotnet-requirement
            <conditional>@pwiz-bindings-dependency
            <conditional>@build-location
        ;
}
