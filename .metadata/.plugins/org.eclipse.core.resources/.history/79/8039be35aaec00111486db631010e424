package edu.ucsd.msjava.msdbsearch;

import edu.ucsd.msjava.msgf.NominalMass;
import edu.ucsd.msjava.msscorer.NewRankScorer;
import edu.ucsd.msjava.msscorer.NewScoredSpectrum;
import edu.ucsd.msjava.msscorer.NewScorerFactory;
import edu.ucsd.msjava.msscorer.NewScorerFactory.SpecDataType;
import edu.ucsd.msjava.msutil.IonType;
import edu.ucsd.msjava.msutil.Peptide;
import edu.ucsd.msjava.msutil.Spectrum;

public class PSMFeatureFinder {
	
	private final Spectrum spec;	// MS/MS spectrum
	private final Spectrum precursorSpec;
	private final Peptide peptide;
	private final NewScoredSpectrum<NominalMass> scoredSpec;
	
	private float sumIonCurrent;
	private float nTermIonCurrent;
	private float cTermIonCurrent;
	
	private float ms1IonCurrent;
	private float ms2IonCurrent;
	private float isolationWindowEfficiency;
	
	public PSMFeatureFinder(Spectrum spec, Peptide peptide, Spectrum precursorSpec, SpecDataType specDataType)
	{
		this.spec = spec;
		this.peptide = peptide;
		this.precursorSpec = precursorSpec;
		NewRankScorer scorer = NewScorerFactory.get(spec.getActivationMethod(), specDataType.getInstrumentType(), specDataType.getEnzyme(), specDataType.getProtocol());
		scoredSpec = scorer.getScoredSpectrum(spec);
	}

	public PSMFeatureFinder(Spectrum spec, Peptide peptide, SpecDataType specDataType)
	{
		this(spec, peptide, null, specDataType);
	}
	
	private void extractFeatures()
	{
	}
	
	private float getExplainedIonCurrent(boolean isPrefix)
	{
		double prm = 0;
		float sumIonCurrent  = 0;
		for(int i=0; i<peptide.size(); i++)
		{
			
		}
		nTermIonCurrent = scoredSpec.getExplainedIonCurrent((float)prm, isPrefix); 
		
		return sumIonCurrent;
	}
	
	public float getExplainedIonCurrent()
	{
		return getNTermExplainedIonCurrent() + getCTermExplainedIonCurrent();
	}
	
	public float getNTermExplainedIonCurrent()
	{
		return nTermIonCurrent/sumIonCurrent;
	}
	
	public float getCTermExplainedIonCurrent()
	{
		return cTermIonCurrent/sumIonCurrent;
	}
	
	public float getMS1IonCurrent()
	{
		return ms1IonCurrent;
	}
	
	public float getMS2IonCurrent()
	{
		return ms2IonCurrent;
	}
	
	public float getIsolationWindowEfficiency()
	{
		return isolationWindowEfficiency;
	}
}
